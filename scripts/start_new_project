#!/usr/bin/env bash

PROJECT_NAME_SLUG=${1:-}          # Use argument $1 or empty as the default
BRANCH=${2:-main}                 # Use argument $2 or main as the default
QUIET_INSTALL=${3:-0}             # Use argument $3 or 0 as the default
QUIET_INSTALL=$((QUIET_INSTALL))  # Cast QUIET_INSTALL to a number

if [[ -n "$4" ]]; then
  PROJECT_DIRECTORY=$4
fi

BRANCH='main'
ARCHIVE_LOCATION='https://github.com/epicserve/django-base-site/archive/'
DOWNLOAD_LOCATION="${ARCHIVE_LOCATION}${BRANCH}.zip"
PROJECT_NAME_SLUG_DEFAULT='example'
PROJECT_DIRECTORY_DEFAULT="$(pwd)/$PROJECT_NAME_SLUG_DEFAULT"
GREEN=$(tput -Txterm setaf 2)
YELLOW=$(tput -Txterm setaf 3)
WHITE=$(tput -Txterm setaf 7)
RESET=$(tput -Txterm sgr0)

function ask_yes_or_no_default_yes() {
    read -r -p "${GREEN}$1${RESET} ${WHITE}(Y/n)${RESET}${GREEN}?${RESET} " response
    readonly response=`echo "$response" | tr '[:upper:]' '[:lower:]'` # to lowercase
    if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
        echo "yes"
    else
        echo "no"
    fi
}

get_project_name_slug() {
  echo -n "${GREEN}What is the project name slug${RESET} ${WHITE}[$PROJECT_NAME_SLUG_DEFAULT]${RESET}${GREEN}?${RESET} "
  read PROJECT_NAME_SLUG
  if [ -z "$PROJECT_NAME_SLUG" ]; then
    PROJECT_NAME_SLUG=$PROJECT_NAME_SLUG_DEFAULT
  fi
}

get_project_directory() {
  PROJECT_DIRECTORY_DEFAULT="$(pwd)/$PROJECT_NAME_SLUG"
  echo -n "${GREEN}What directory do you want your project in${RESET} ${WHITE}[$PROJECT_DIRECTORY_DEFAULT]${RESET}${GREEN}?${RESET} "
  read PROJECT_DIRECTORY
  if [ -z "$PROJECT_DIRECTORY" ]; then
    PROJECT_DIRECTORY=$PROJECT_DIRECTORY_DEFAULT
  fi
}

if [ $QUIET_INSTALL -eq 0 ]; then
  echo ""
  get_project_name_slug
  get_project_directory
fi

if [ -n "$(ls -A $PROJECT_DIRECTORY 2> /dev/null)" ]; then
    if [[ "yes" = $(ask_yes_or_no_default_yes "The directory ${PROJECT_DIRECTORY} is not empty. If you continue, the contents will be removed. Do you want to continue") ]]; then
        rm -rf $PROJECT_DIRECTORY
    else
        echo "Quit. Nothing changed."
        exit
    fi
fi

if [ $QUIET_INSTALL -eq 1 ]; then
  cp -r . $PROJECT_DIRECTORY
  cd $PROJECT_DIRECTORY
  rm -rf .git/
else
  curl -LOks $DOWNLOAD_LOCATION && unzip -q $BRANCH
  mv django-base-site-$BRANCH $PROJECT_DIRECTORY
  rm -rf django-base-site-$BRANCH
  rm $BRANCH.zip
  cd $PROJECT_DIRECTORY
fi

SECRET_KEY=$(python -c "import random; print(''.join(random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyz0123456789%^&*(-_=+)') for i in range(50)))")
cat > .env <<EOF
DEBUG=on
SECRET_KEY='$SECRET_KEY'
DATABASE_URL=postgres://postgres:@db:5432/postgres
INTERNAL_IPS=127.0.0.1,0.0.0.0
EOF

just remove_extra_files
find ./public -name ".keep" | xargs rm -rf

echo ""
echo "Done."
echo ""
echo "To start Docker Compose run:"
echo "$ cd $PROJECT_DIRECTORY"
echo "$ just start"
echo ""
